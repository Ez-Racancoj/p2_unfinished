package com.gamefromscratch;
/*
public class PlayerSprite {
    public enum State{
        NOT_MOVING,
        START_MOVING,
        IS_MOVING,
        MOVING_LEFT,
        MOVING_RIGHT
    }
    private State state;
    public PlayerSprite() {
        this.state = State.NOT_MOVING;
    }
}*/

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.Array;
/*
import com.badlogic.prototype.Prototype;
import com.badlogic.prototype.Screens.Level;
import com.badlogic.prototype.Sprites.Enemies.Enemy;
import com.badlogic.prototype.Sprites.TileObjects.InteractiveTileObject;
*/


public class PlayerSprite extends Sprite {
    // States
    public enum State { FALLING, JUMPING, STANDING, WALKING, MOVE_RIGHT,MOVE_LEFT};
    public State currentState;
    public State previousState;

    // Sound effects:
    private Sound jumpSound;
    private Sound dieSound;
    private Sound attackSound;

    // Box2D
    public World world;
    public Body b2body;
    public Body attack;

    // Atlas and Animations
    private TextureAtlas textureAtlas;
    private Animation idleAnimation;
    private Animation jumpingAnimation;
    private Animation fallingAnimation;
    private Animation walkingLeftAnimation;
    private Animation walkingRightAnimation;

    // Frames
    private Array<TextureAtlas.AtlasRegion> idleFrames;
    private Array<TextureAtlas.AtlasRegion> jumpingFrames;
    private Array<TextureAtlas.AtlasRegion> walkingRight;
    private Array<TextureAtlas.AtlasRegion> walkingLeft;
    private float timePassed;
    private boolean runningRight;

    public PlayerSprite(float startingX, float startingY){
        //initialize default values
        /*this.screen = screen;
        this.world = screen.getWorld();*/
        currentState = State.STANDING;
        previousState = State.STANDING;
        timePassed = 0;
        runningRight = true;
       /*
        // Set up sound effects.
        jumpSound = Gdx.audio.newSound(Gdx.files.internal("cartoon-jump-6462.mp3"));
        dieSound = Gdx.audio.newSound(Gdx.files.internal("male_hurt7-48124.mp3"));
        attackSound = Gdx.audio.newSound(Gdx.files.internal("swinging-staff-whoosh-strong-08-44658.mp3"));
*/
        // Sets up all player animations and frames using the atlas labels.
        textureAtlas = new TextureAtlas(Gdx.files.internal("proj2_sprite/p2_anim_sprite.atlas"));
        idleFrames = textureAtlas.findRegions("standing");
        idleAnimation = new Animation(1/10f, idleFrames);
        walkingLeft = textureAtlas.findRegions("walk_left");
        walkingLeftAnimation = new Animation(1/10f, walkingLeft);
        walkingRight = textureAtlas.findRegions("walk_right");
        walkingLeftAnimation = new Animation(1/10f, walkingRight);



        // Sets knight scale to 3x
        setScale(3f);

        //define Knight in Box2d
        definePlayer(startingX, startingY);

        attack.setActive(false);

        //set initial values for knight's location, width, and height. And initial frame as the first idle frame.
        setBounds(0, 0,  Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        setRegion(idleFrames.get(0));

    }

    public void update(float elapsedTime, float dt){

        //setPosition(b2body.getPosition().x - getWidth() / 2, b2body.getPosition().y - getHeight() / 2);
        setPosition(b2body.getPosition().x - getWidth()*1.5f, b2body.getPosition().y - getHeight()/1.1f);

        //attack box thing
        if(runningRight)
        {

        }
        else
        {

        }

        //update sprite with the correct frame depending on knight's current action
        setRegion(getFrame(elapsedTime, dt));
    }

    public TextureRegion getFrame(float elapsedTime, float dt){
        //get knight's current state. ie. jumping, running, standing...
        currentState = getState();

        TextureRegion region;

        //depending on the state, get corresponding animation keyFrame.
        switch(currentState){
            case MOVE_LEFT:
                region = ((TextureRegion) walkingLeftAnimation.getKeyFrame(elapsedTime, true));
            case MOVE_RIGHT:
                region = ((TextureRegion) walkingRightAnimation.getKeyFrame(elapsedTime,true);
            default:
                region = ((TextureRegion) idleAnimation.getKeyFrame(elapsedTime, true));
                break;
        }

        //if knight is running left and the texture isn't facing left, flip it.
        if((b2body.getLinearVelocity().x < 0 || !runningRight) && !region.isFlipX()){
            region.flip(true, false);
            runningRight = false;
        }

        //if knight is running right and the texture isn't facing right, flip it.
        else if((b2body.getLinearVelocity().x > 0 || runningRight) && region.isFlipX()){
            region.flip(true, false);
            runningRight = true;
        }

        //if the current state is the same as the previous state increase the state timer.
        //otherwise the state has changed and we need to reset timer.
        timePassed = currentState == previousState ? timePassed + dt : 0;
        //update previous state
        previousState = currentState;
        //return our final adjusted frame
        return region;
    }

    public State getState(){
        //Test to Box2D for velocity on the X and Y-Axis
        //if knight is going positive in Y-Axis he is jumping... or if he just jumped and is falling remain in jump state

        if((b2body.getLinearVelocity().y > 0 && currentState == State.JUMPING) || (b2body.getLinearVelocity().y < 0 && previousState == State.JUMPING))
            return State.JUMPING;
        else if(b2body.getLinearVelocity().y < 0 && b2body.getLinearVelocity().y != 0)
            return State.FALLING;
        else if(b2body.getLinearVelocity().x < 0)
            return State.MOVE_LEFT;
        else if (b2body.getLinearVelocity().x > 0)
            return State.MOVE_RIGHT;
        else
            return State.STANDING;
    }




    public float getTimePassed(){
        return timePassed;
    }

    public void jump(){
        if ( currentState != State.JUMPING ) {
            b2body.applyLinearImpulse(new Vector2(0, 4f), b2body.getWorldCenter(), true);
            currentState = State.JUMPING;
            jumpSound.play();
        }
    }

    public void definePlayer(float startingX, float startingY) {
        // Creates knight body.
        BodyDef bdef = new BodyDef();
        setPosition(startingX / Prototype.PPM, startingY / Prototype.PPM);
        bdef.position.set(getX() + getWidth() / 2, getY() + getHeight() / 2);
        bdef.type = BodyDef.BodyType.DynamicBody;
        b2body = world.createBody(bdef);

 /*
        FixtureDef fdef = new FixtureDef();
        PolygonShape shape = new PolygonShape();
        shape.setAsBox(7/ Prototype.PPM,13/ Prototype.PPM);
        fdef.filter.categoryBits = Prototype.KNIGHT_BIT;
        fdef.filter.maskBits = Prototype.GROUND_BIT |
                Prototype.SPIKE_BIT |
                Prototype.GOAL_BIT |
                Prototype.ENEMY_BIT;
        fdef.shape = shape;
        fdef.friction = .5f;
        b2body.createFixture(fdef).setUserData(this);*/
    }

    // Draws the knight in the batch.
    public void draw(Batch batch){
        super.draw(batch);
    }

}
